{
  "name": "player-html5",
  "version": "0.0.0",
  "description": "PlayerHTML5",
  "main": "app.js",
  "private": true,
  "author": {
    "name": ""
  },
  "comentario": {
    "LG-comentario1": "Generaremos 3 archivos de salida en out:",
    "LG-comentario2": "scap_app_debug.zip sin minificar y conservando los archivos .map",
    "LG-comentario3": "scap_app.zip minificado y sin archivos .map",
    "LG-comentario4": "scap_app_uglify.zip minificado y conservando los archivos .map. Sera util para depurar un player minificado",
    "LG-IPK-comentario1": "No usamos un uglify propio, sino el del ares-package",
    "electron-comentario1": "Generaremos 3 archivos de salida en out:",
    "electron-comentario2": "En Debug, js sin minificar y conservando los archivos .map",
    "electron-comentario3": "En Release: js minificado y sin archivos .map",
    "electron-comentario4": "? js minificado y conservando los archivos .map",
    "electron-comentario5": "------------",
    "electron-comentario6": "TODO: Evaluar usar npm link en lugar de npm install para ahorrar tiempo de compilacion",
    "electron-comentario7": "TODO: Intentar evitar el borrado de out/node_modules y out/app/node_modules entre builds",
    "electron-comentario8": "",
    "electron-comentario9": ""
  },
  "scripts": {
    "//noUsado-copyTypeJquery": "cpy --rename=jquery.d.ts ../PlayerHTML5-Comun/node_modules/@types/jquery/*.d.ts ../PlayerHTML5-Comun/types/src/lib/external/jquery/",
    "//noUsado-copyTypeJqueryUi": "cpy --rename=jquery-ui.d.ts ../PlayerHTML5-Comun/node_modules/@types/jqueryui/*.d.ts ../PlayerHTML5-Comun/types/src/lib/external/jquery/",
    "//noUsado-copyTypeJsZip": "cpy --rename=jszip.d.ts ../PlayerHTML5-Comun/node_modules/@types/jszip/*.d.ts ../PlayerHTML5-Comun/types/src/lib/external/",
    "//noUsado-copyTypes": "npm run copyTypeJquery && npm run copyTypeJqueryUi && npm run copyTypeJsZip",
    "//comentario-allowJsTrue-CopyDist": "Si en tsconfig.json se habilita, habria que usar allowJsTrue-CopyDist en lugar de copyDist",
    "quitarSoloLecturaDist": "cd dist && attrib -R /S && cd ..",
    "quitarSoloLecturaOut": "cd out/dist/win-unpacked/ && attrib -R /S && cd ../../../",
    "LG-allowJsTrue-CopyDist": "copyfiles -u 2 Common/src/**/* dist && copyfiles -u 2 LG/src/**/* dist && rimraf dist/**/*.js dist/**/*.ts dist/**/*.map && copyfiles -u 3 built/*/*/**/* dist",
    "LG-copyDist": "rimraf dist/**/* && copyfiles -u 2 Common/src/**/* dist && copyfiles -u 2 LG/src/**/* dist && rimraf dist/**/*.ts dist/**/*.map && copyfiles -u 3 built/*/*/**/* dist",
    "LG-IPK-copyDist": "copyfiles -u 2 Common/src/**/* dist/app && copyfiles -u 2 LG/src/**/* dist/app && copyfiles -u 2 \"LG IPK\"/app/**/* dist/app && copyfiles -u 2 \"LG IPK\"/service/**/* dist/service && rimraf dist/**/*.ts dist/**/*.map && copyfiles -u 3 built/*/*/**/* dist",
    "electron-allowJsTrue-CopyDist": "copyfiles -u 2 Common/src/**/* dist && copyfiles -u 2 electron/src/**/* dist && rimraf dist/**/*.js dist/**/*.ts dist/**/*.map && copyfiles -u 3 built/*/*/**/* dist",
    "electron-comun-copyDist": "copyfiles -u 2 Common/src/**/* dist && copyfiles -u 3 electron/src/app/**/* dist && rimraf dist/**/*.ts dist/**/*.map && copyfiles -u 3 built/*/*/**/* dist",
    "electron-windows-copyDist": "npm run electron-comun-copyDist && copyfiles -u 2 dist/assets_windows/**/* dist/assets/ && rimraf dist/assets_*",
    "Tizen-allowJsTrue-CopyDist": "copyfiles -u 2 Common/src/**/* dist && copyfiles -u 2 Tizen/src/**/* dist && rimraf dist/**/*.js dist/**/*.ts dist/**/*.map && copyfiles -u 3 built/*/*/**/* dist",
    "Tizen-copyDist": "copyfiles -u 2 Common/src/**/* dist && copyfiles -u 2 Tizen/src/**/* dist && rimraf dist/**/*.ts dist/**/*.map && copyfiles -u 3 built/*/*/**/* dist",
    "rellenaVersion": "node Common/build-version.js dist/lib/version.js",
    "LG-IPK-rellenaVersion": "node Common/build-version.js dist/app/lib/version.js",
    "LG-zipDebug": "mkdirp out && cd dist && bestzip ../out/scap_app_debug.zip * && cd ..",
    "//electron-empaquetar": "mkdirp out && cd dist && bestzip ../out/scap_app_debug.zip * && cd ..",
    "//TODO": "habria que refactorizar uglify para usar parametros y que fuera comun",
    "uglify": "uglify dist --source-map content=inline --v8",
    "LG-uglifyDirSourceMap": "rimraf uglify/**/* && uglifyjs-folder dist --source-map content=inline --v8 -e -x .js -o uglify --config-file=LG/uglify-sourcemap.json && npm run quitarSoloLecturaDist && copyfiles -u 1 uglify/**/* dist",
    "LG-uglifyDir": "rimraf uglify/**/* && uglifyjs-folder dist --source-map content=inline --v8 -e -x .js -o uglify --config-file=LG/uglify.json && npm run quitarSoloLecturaDist && copyfiles -u 1 uglify/**/* dist",
    "electron-uglifyDir": "rimraf uglify/**/* && uglifyjs-folder dist --source-map content=inline --v8 -e -x .js -o uglify --config-file=electron/uglify.json && npm run quitarSoloLecturaDist && copyfiles -u 1 uglify/**/* dist",
    "Tizen-uglifyDir": "rimraf uglify/**/* && uglifyjs-folder dist --source-map content=inline --v8 -e -x .js -o uglify --config-file=Tizen/uglify.json && npm run quitarSoloLecturaDist && copyfiles -u 1 uglify/**/* dist",
    "removeDebugSymbols": "rimraf dist/**/*.map dist/**/*.tsbuildinfo",
    "LG-zip": "mkdirp out && cd dist && bestzip ../out/scap_app.zip * && cd ..",
    "LG-zipUglify": "mkdirp out && cd dist && bestzip ../out/scap_app_uglify.zip * && cd ..",
    "cleanDirs": "rimraf dist && rimraf out && rimraf uglify && rimraf built",
    "//noUsado-empaquetar2": "npm run zipDebug && npm run removeDebugSymbols && npm run zip && npm run uglifyDir && npm run zip && npm run uglifyDir && npm run zipUglify",
    "LG-empaquetar": "npm run LG-zipDebug && npm run LG-uglifyDir && npm run LG-zip && rimraf uglify && npm run LG-uglifyDirSourceMap && npm run LG-zipUglify",
    "LG-IPK-empaquetar-debug": "cd dist/service && npm install && cd ../.. && %LG_WEBOS_SIGNAGE_SDK_HOME%\\cli\\bin\\ares-package --no-minify -e *.dll --outdir=out dist/app dist/service",
    "LG-IPK-empaquetar": "cd dist/service && npm install && cd ../.. && %LG_WEBOS_SIGNAGE_SDK_HOME%\\cli\\bin\\ares-package -e *.dll -e *.map --outdir=out dist/app dist/service",
    "//oldelectron-empaquetar-debug": "cd dist && npm install && npm run rebuild && electron . && cd ..",
    "//electron-empaquetar-debug": "mkdirp out && rimraf out/**/* && copyfiles -u 2 -e electron/src/app electron/src/**/* out && rimraf out/app && move-cli dist out/app && cd out/app && npm run start && npm run rebuild && cd .. && npm install && npm run build-windows-64",
    "electron-empaquetar-debug": "mkdirp out && rimraf out/**/* && copyfiles -u 2 -e electron/src/app electron/src/**/* out && rimraf out/app && move-cli dist out/app && cd out && npm install && cd app && npm install && npm run rebuild && cd .. && npm run build-windows-64 && cd ..",
    "//electron-lanzar-debug": "copyfiles -f out/varios/config.ini out && cd out && npm run lanzar-debug && cd ..",
    "electron-lanzar-debug": "npm run quitarSoloLecturaOut && echo: >> out/dist/win-unpacked/config.ini && echo debug=trueDeneva >> out/dist/win-unpacked/config.ini && out\\dist\\win-unpacked\\denevaPlayer.exe",
    "//electron-builder --win --x64 --dir": "copiar electron sin app prepublishOnly lanzar electron builder",
    "// electron-empaquetar": "npm run electron-uglifyDir && mkdirp out && cd dist && npm install && npm run rebuild && electron . & cd ..",
    "electron-empaquetar": "npm run electron-uglifyDir && mkdirp out && rimraf out/**/* && copyfiles -u 2 -e electron/src/app electron/src/**/* out && rimraf out/app && move-cli dist out/app && cd out && npm install && cd app && npm install && npm run rebuild && cd .. && npm run build-windows-64 && cd ..",
    "//invocacion-builds": "Los plataforma-build y plataforma-debug-build se invocan desde el target AfterCompile del proyecto. Si hay que anadir nuevas plataformas, habra que anadirlas ahi tambien",
    "Tizen-empaquetar-debug": "mkdirp out && cd dist/ && tizen package -t wgt -s ICONMM && copyfiles Deneva.wgt ../out && cd ..",
    "Tizen-empaquetar": "npm run Tizen-uglifyDir && npm run Tizen-empaquetar-debug",
    "LG-debug-build": "npm run LG-build",
    "LG-build": "npm run LG-buildTs && npm run LG-copyDist && npm run rellenaVersion && npm run LG-empaquetar && echo El resultado esta en out\\",
    "LG-IPK-debug-build": "npm run LG-buildTs && npm run LG-IPK-copyDist && npm run LG-IPK-rellenaVersion && npm run LG-IPK-empaquetar-debug && echo El resultado esta en out\\ Recuerda que el codigo no esta minificado, no uses esto para una release",
    "LG-IPK-build": "npm run LG-buildTs && npm run LG-IPK-copyDist && npm run LG-IPK-rellenaVersion && npm run LG-IPK-empaquetar && echo El resultado esta en out\\",
    "electron-windows-debug-build": "npm run electron-buildTs && npm run electron-windows-copyDist && npm run rellenaVersion && npm run electron-empaquetar-debug && echo El resultado esta en out\\dist\\win-unpacked\\ Recuerda que el codigo no esta minificado, no uses esto para una release && npm run electron-lanzar-debug",
    "electron-windows-build": "npm run electron-buildTs && npm run electron-windows-copyDist && npm run rellenaVersion && npm run electron-empaquetar && echo El resultado esta en out\\dist\\win-unpacked\\",
    "Tizen-debug-build": "npm run Tizen-buildTs && npm run Tizen-copyDist && npm run rellenaVersion && npm run Tizen-empaquetar-debug && echo El resultado esta en out\\ Recuerda que el codigo no esta minificado, no uses esto para una release",
    "Tizen-build": "npm run Tizen-buildTs && npm run Tizen-copyDist && npm run rellenaVersion && npm run Tizen-empaquetar && echo El resultado esta en out\\",
    "clean": "npm run cleanTs && npm run cleanDirs",
    "Tizen-buildTs": "tsc --build Tizen/",
    "electron-buildTs": "tsc --build electron/",
    "LG-buildTs": "tsc --build LG/",
    "cleanTs": "tsc --build --clean LG/ && tsc --build --clean electron/ && tsc --build --clean Tizen/",
    "release": "npm run lint && tsc -noEmit && esbuild Common/src/TS/initPipeline.ts --bundle --minify --outfile=out.js --platform=node --sourcemap",
    "lint": "eslint . --fix",
    "test": "uvu -r tsm Common/__tests__/"
    },
  "devDependencies": {
    "@swc-node/register": "^1.5.1",
    "@types/crypto-js": "^4.1.1",
    "@types/jquery": "^1.10.39",
    "@types/jqueryui": "^1.11.37",
    "@types/jszip": "0.0.33",
    "@types/node": "^14.18.22",
    "@types/qrcode": "^1.4.2",
    "@typescript-eslint/eslint-plugin": "^5.31.0",
    "@typescript-eslint/parser": "^5.31.0",
    "bestzip": "^2.2.0",
    "copyfiles": "^2.4.1",
    "cpy-cli": "^4.0.0",
    "cross-env": "^7.0.3",
    "eslint": "^8.18.0",
    "grunt-contrib-uglify": "^5.2.2",
    "mkdirp": "^1.0.4",
    "move-cli": "^2.0.0",
    "replace-in-file": "^6.3.2",
    "rimraf": "^3.0.2",
    "typescript": "4.8.0-dev.20220809",
    "uglify-js": "^3.15.1",
    "uglifyjs-folder": "^3.0.0",
    "uvu": "^0.5.6"
  },
  "dependencies": {
    "axios": "^0.27.2",
    "crypto-js": "^4.1.1",
    "esbuild": "^0.14.50",
    "esbuild-ifdef": "^0.1.8",
    "qrcode": "^1.5.1",
    "tsm": "^2.2.2"
  },
  "type": "module"
}
